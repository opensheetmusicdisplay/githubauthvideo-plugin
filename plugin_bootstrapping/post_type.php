<?php
add_action( 'init', 'githubauthvideo_register_post_type' );
function githubauthvideo_register_post_type() {
	$args = [
		'label'  => esc_html__( 'Github Sponsor Videos', 'text-domain' ),
		'labels' => [
			'menu_name'          => esc_html__( 'Github Sponsor Videos', 'githubauthvideo' ),
			'name_admin_bar'     => esc_html__( 'Github Sponsor Video', 'githubauthvideo' ),
			'add_new'            => esc_html__( 'Add Github Sponsor Video', 'githubauthvideo' ),
			'add_new_item'       => esc_html__( 'Add new Github Sponsor Video', 'githubauthvideo' ),
			'new_item'           => esc_html__( 'New Github Sponsor Video', 'githubauthvideo' ),
			'edit_item'          => esc_html__( 'Edit Github Sponsor Video', 'githubauthvideo' ),
			'view_item'          => esc_html__( 'View Github Sponsor Video', 'githubauthvideo' ),
			'update_item'        => esc_html__( 'View Github Sponsor Video', 'githubauthvideo' ),
			'all_items'          => esc_html__( 'All Github Sponsor Videos', 'githubauthvideo' ),
			'search_items'       => esc_html__( 'Search Github Sponsor Videos', 'githubauthvideo' ),
			'parent_item_colon'  => esc_html__( 'Parent Github Sponsor Video', 'githubauthvideo' ),
			'not_found'          => esc_html__( 'No Github Sponsor Videos found', 'githubauthvideo' ),
			'not_found_in_trash' => esc_html__( 'No Github Sponsor Videos found in Trash', 'githubauthvideo' ),
			'name'               => esc_html__( 'Github Sponsor Videos', 'githubauthvideo' ),
			'singular_name'      => esc_html__( 'Github Sponsor Video', 'githubauthvideo' ),
		],
		'public'              => false,
		'exclude_from_search' => true,
		'publicly_queryable'  => false,
		'show_ui'             => true,
		'show_in_nav_menus'   => false,
		'show_in_admin_bar'   => true,
		'show_in_rest'        => false,
		'capability_type'     => 'post',
		'hierarchical'        => false,
		'has_archive'         => true,
		'query_var'           => false,
		'can_export'          => true,
		'rewrite_no_front'    => false,
		'show_in_menu'        => 'upload.php',
		'menu_icon'           => 'dashicons-video-alt2',
		'supports' => [
			'title',
			'revisions',
			'custom_fields'
		],
		'rewrite' => true
	];

	register_post_type( 'github-sponsor-video', $args );
}

    // add the filter 
	add_filter( 'manage_posts_columns', 'githubauthvideo_add_id_column', 2, 2 ); 
	add_action( 'manage_posts_custom_column', 'githubauthvideo_add_id_column_content', 2, 2 );
	
    // define the manage_posts_columns callback 
    function githubauthvideo_add_id_column( $posts_columns, $post_type ) { 
		if($post_type == 'github-sponsor-video') {
			$post_columns['githubauthvideo_id'] = 'ID';
		}
        return $posts_columns; 
	}; 
	
	function githubauthvideo_add_id_column_content ( $column, $id ) {
		if('githubauthvideo_id' == $column) {
			echo $id;
		}
	}

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * Video Location URL = get_post_meta( get_the_ID(), 'githubauthvideo_video-location-url', true )
 * Video Location Server Path = get_post_meta( get_the_ID(), 'githubauthvideo_video-location-server-path', true )
 * Is URL Video = get_post_meta( get_the_ID(), 'githubauthvideo_is-url-video', true )
 */
class Github_Video_Entry_Fields {
	private $config = '{"title":"Video Entry Data","description":"Specifies the necessary mapping to Github Sponsor Auth videos.","prefix":"githubauthvideo_","domain":"githubauthvideo","class_name":"Github_Video_Entry_Fields","post-type":["post"],"context":"normal","priority":"default","cpt":"github-sponsor-video","fields":[{"type":"url","label":"Video Location URL","id":"githubauthvideo_video-location-url"},{"type":"text","label":"Video Location Server Path","id":"githubauthvideo_video-location-server-path"},{"type":"checkbox","label":"Is URL Video","description":"Specifies whether the video is at the URL or on the local server","checked":"1","id":"githubauthvideo_is-url-video"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'admin_head', [ $this, 'admin_head' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function admin_head() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			?><?php
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'checkbox':
					update_post_meta( $post_id, $field['id'], isset( $_POST[ $field['id'] ] ) ? $_POST[ $field['id'] ] : '' );
					break;
				case 'url':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = esc_url_raw( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
					break;
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'checkbox':
				$this->checkbox( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function checkbox( $field ) {
		printf(
			'<label class="rwp-checkbox-label"><input %s id="%s" name="%s" type="checkbox"> %s</label>',
			$this->checked( $field ),
			$field['id'], $field['id'],
			isset( $field['description'] ) ? $field['description'] : ''
		);
	}

	private function input( $field ) {
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

	private function checked( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
			if ( $value === 'on' ) {
				return 'checked';
			}
			return '';
		} else if ( isset( $field['checked'] ) ) {
			return 'checked';
		}
		return '';
	}
}
new Github_Video_Entry_Fields;
?>