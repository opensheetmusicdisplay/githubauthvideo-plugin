<?php
if ( ! defined( 'ABSPATH' ) ) exit;
/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class githubauthvideo_MainSettings {
	protected $main_settings_options;

	public function __construct() {
		add_action( 'admin_menu', array( $this, 'main_settings_add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'main_settings_page_init' ) );
	}

	public function main_settings_add_plugin_page() {
		add_menu_page(
			'Github Sponsor Video Plugin',
			'Github Video',
			'manage_options',
			'githubauthvideo',
			null,
			'dashicons-format-video',
			null
		);
		add_submenu_page(
			'githubauthvideo',
            'Github Sponsor Video Plugin Settings',
            'Settings',
            'manage_options',
            'githubauthvideo_settings',
			array( $this, 'main_settings_create_admin_page' )
		);
	}

	public function main_settings_create_admin_page() {
		$this->main_settings_options = get_option( 'githubauthvideo_main_settings' ); ?>

		<div class="wrap">
			<h2>Github Sponsor Video Plugin Settings</h2>
			<p></p>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'main_settings_option_group' );
					do_settings_sections( 'main-settings-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	public function main_settings_page_init() {
		register_setting(
			'main_settings_option_group', // option_group
			'githubauthvideo_main_settings', // option_name
			array( $this, 'main_settings_sanitize' ) // sanitize_callback
		);

		add_settings_section(
			'main_settings_setting_section', // id
			'Settings', // title
			array( $this, 'main_settings_section_info' ), // callback
			'main-settings-admin' // page
		);

		add_settings_field(
			'github_app_client_id_0', // id
			'Github App Client ID', // title
			array( $this, 'github_app_client_id_0_callback' ), // callback
			'main-settings-admin', // page
			'main_settings_setting_section' // section
		);

		add_settings_field(
			'github_app_client_secret_1', // id
			'Github App Client Secret', // title
			array( $this, 'github_app_client_secret_1_callback' ), // callback
			'main-settings-admin', // page
			'main_settings_setting_section' // section
		);

		add_settings_field(
			'jwt_private_key_2', // id
			'Private Key For Session Generation', // title
			array( $this, 'jwt_private_key_2_callback' ), // callback
			'main-settings-admin', // page
			'main_settings_setting_section' // section
		);

		add_settings_field(
			'ignore_sponsorship_4', // id
			'Ignore Sponsorship Status', // title
			array( $this, 'ignore_sponsorship_4_callback' ), // callback
			'main-settings-admin', // page
			'main_settings_setting_section' // section
		);

		add_settings_field(
			'do_not_enforce_https_5', // id
			'Do Not Require HTTPS', // title
			array( $this, 'do_not_enforce_https_5_callback' ), // callback
			'main-settings-admin', // page
			'main_settings_setting_section' // section
		);

		add_settings_field(
			'server_side_rendering_6', // id
			'Use Server-Side Rendering for Player', // title
			array( $this, 'server_side_rendering_6_callback' ), // callback
			'main-settings-admin', // page
			'main_settings_setting_section' // section
		);
	}

	public function main_settings_sanitize($input) {
		$sanitary_values = array();
		if ( isset( $input['github_app_client_id_0'] ) ) {
			$client_id = sanitize_text_field( $input['github_app_client_id_0'] );
			if (strlen($client_id) === 20 && ctype_xdigit($client_id) ){
				$sanitary_values['github_app_client_id_0'] = $client_id;
			} else {
				if(isset( $this->main_settings_options['github_app_client_id_0'] )){
					$sanitary_values['github_app_client_id_0'] = $this->main_settings_options['github_app_client_id_0'];
				}
				add_settings_error('github_app_client_id_0', 'github_app_client_id_0_len_hex', 'The Github app client ID must be a 20 digit hexadecimal number.');
			}
		}

		if ( isset( $input['github_app_client_secret_1'] ) ) {
			$client_secret = sanitize_text_field( $input['github_app_client_secret_1'] );
			if (strlen($client_secret) === 40 && ctype_xdigit($client_secret) ){
				$sanitary_values['github_app_client_secret_1'] = $client_secret;
			} else {
				if(isset( $this->main_settings_options['github_app_client_secret_1'] )){
					$sanitary_values['github_app_client_secret_1'] = $this->main_settings_options['github_app_client_secret_1'];
				}
				add_settings_error('github_app_client_secret_1', 'github_app_client_secret_1_len_hex', 'The Github app client secret must be a 40 digit hexadecimal number.');
			}
		}

		if ( isset( $input['jwt_private_key_2'] ) ) {
			$jwt_private_key =  sanitize_text_field( $input['jwt_private_key_2'] );
			if(base64_decode($jwt_private_key, true)){
				$sanitary_values['jwt_private_key_2'] = $jwt_private_key;
			} else {
				if(isset( $this->main_settings_options['jwt_private_key_2'] )){
					$sanitary_values['jwt_private_key_2'] = $this->main_settings_options['jwt_private_key_2'];
				}
				add_settings_error('jwt_private_key_2', 'jwt_private_key_2_base', 'The Private key for session generation must be a base64 string.');
			}
			
		}

		if ( isset( $input['ignore_sponsorship_4'] ) ) {
			$sanitary_values['ignore_sponsorship_4'] = $input['ignore_sponsorship_4'];
		}

		if ( isset( $input['do_not_enforce_https_5'] ) ) {
			$sanitary_values['do_not_enforce_https_5'] = $input['do_not_enforce_https_5'];
		}

		if ( isset( $input['server_side_rendering_6'] ) ) {
			$sanitary_values['server_side_rendering_6'] = $input['server_side_rendering_6'];
		}
		return $sanitary_values;
	}

	public function main_settings_section_info() {
		
	}

	public function github_app_client_id_0_callback() {
		printf(
			'<input class="regular-text" minlength="20" maxlength="20" pattern="[a-fA-F0-9]+" required type="text" name="githubauthvideo_main_settings[github_app_client_id_0]" id="github_app_client_id_0" value="%s">',
			isset( $this->main_settings_options['github_app_client_id_0'] ) ? esc_attr( $this->main_settings_options['github_app_client_id_0']) : ''
		);
	}

	public function github_app_client_secret_1_callback() {
		printf(
			'<input class="regular-text" minlength="40" maxlength="40" pattern="[a-fA-F0-9]+" required type="password" name="githubauthvideo_main_settings[github_app_client_secret_1]" id="github_app_client_secret_1" value="%s"><span style="cursor:pointer;font-size:30px;" class="dashicons dashicons-visibility" onclick="window.githubauthvideo_showPassword(\'github_app_client_secret_1\')"></span>',
			isset( $this->main_settings_options['github_app_client_secret_1'] ) ? esc_attr( $this->main_settings_options['github_app_client_secret_1']) : ''
		);
	}

	public function jwt_private_key_2_callback() {
		printf(
			'<input class="regular-text" minlength="32" pattern="^[-A-Za-z0-9+\/]*={0,3}$" type="password" required name="githubauthvideo_main_settings[jwt_private_key_2]" id="jwt_private_key_2" value="%s"><span style="cursor:pointer;font-size:30px;" class="dashicons dashicons-visibility" onclick="window.githubauthvideo_showPassword(\'jwt_private_key_2\')"></span><br><sub>NOTE: Must be a base64 string</sub>',
			isset( $this->main_settings_options['jwt_private_key_2'] ) ? esc_attr( $this->main_settings_options['jwt_private_key_2']) : ''
		);
	}

	public function ignore_sponsorship_4_callback() {
		printf(
			'<input type="checkbox" name="githubauthvideo_main_settings[ignore_sponsorship_4]" id="ignore_sponsorship_4" value="ignore_sponsorship_4" %s> <label for="ignore_sponsorship_4">Check to ignore whether the user is a sponsor of the specified organization. Just Github authentication will grant them access.</label><br><sub>NOTE: You may need to clear the server-side cache when toggling this setting.</sub>',
			( isset( $this->main_settings_options['ignore_sponsorship_4'] ) && $this->main_settings_options['ignore_sponsorship_4'] === 'ignore_sponsorship_4' ) ? 'checked' : ''
		);
	}

	public function do_not_enforce_https_5_callback() {
		printf(
			'<input type="checkbox" name="githubauthvideo_main_settings[do_not_enforce_https_5]" id="do_not_enforce_https_5" value="do_not_enforce_https_5" %s> <label for="do_not_enforce_https_5">Check to ignore whether the server has HTTPS enabled. THIS IS NOT RECOMMENDED FOR SECURITY REASONS.</label>',
			( isset( $this->main_settings_options['do_not_enforce_https_5'] ) && $this->main_settings_options['do_not_enforce_https_5'] === 'do_not_enforce_https_5' ) ? 'checked' : ''
		);
	}

	public function server_side_rendering_6_callback() {
		printf(
			'<input type="checkbox" name="githubauthvideo_main_settings[server_side_rendering_6]" id="server_side_rendering_6" value="server_side_rendering_6" %s> <label for="server_side_rendering_6">Check to render the player via the server.  Uncheck use JS client-side rendering. If your hosting provider enforces server caching, client-side rendering may be necessary.</label><br><sub>NOTE: You may need to clear the server-side cache when toggling this setting.</sub>',
			( isset( $this->main_settings_options['server_side_rendering_6'] ) && $this->main_settings_options['server_side_rendering_6'] === 'server_side_rendering_6' ) ? 'checked' : ''
		);
	}

}

/* 
 * Retrieve this value with:
 * $main_settings_options = get_option( 'githubauthvideo_main_settings' ); // Array of All Options
 * $github_app_client_id_0 = $main_settings_options['github_app_client_id_0']; // Github App Client ID
 * $github_app_client_secret_1 = $main_settings_options['github_app_client_secret_1']; // Github App Client Secret
 * $jwt_private_key_2 = $main_settings_options['jwt_private_key_2']; // Private Key For Session Generation
 * $ignore_sponsorship_4 = $main_settings_options['ignore_sponsorship_4']; // Whether to track if the user is sponsoring the organization or not for video access
 * $do_not_enforce_https_5 = $main_settings_options['do_not_enforce_https_5']; // Check to ignore enforcement of HTTPS on the server
 * $server_side_rendering_6 = $main_settings_options['server_side_rendering_6']; // Whether the server does the rendering or the client
 */

 ?>